// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:

   /*

    !!!!!! Important !!!!!!

    Digital component diagram for ALU : https://minio.llycloud.com/image/uPic/image-202108037QcSEn.png

    !!!!!! Important !!!!!!


   */

   /*
        The final steps are to implement the zx and zy controls. 
        
        These controls should be applied before the nx and ny controls. 
        
        In these cases we need to produce a 0 or the original x or y. To obtain a 0 we use the keyword false as one the inputs to a new Mux16 chip.

   */

   Mux16(a=x, b[0..15]=false, sel=zx, out=outOfzx);
   Mux16(a=y, b[0..15]=false, sel=zy, out=outOfzy);

    /*
        6. We can repeat the previous step to implement the bitwise not controls nx and ny

        In each case we feed the x or y to a new Mux16 chip and also to a Not16 chip then use the nx or ny control as a selector.
    */

   Not16(in=outOfzx, out=outX);
   Not16(in=outOfzy, out=outY);

   Mux16(a=outOfzx, b=outX, sel=nx, out=outOfnx);
   Mux16(a=outOfzy, b=outY, sel=ny, out=outOfny);

   // 3. Start by adding the x and y inputs together and connecting the result to out. 

   Add16(a=outOfnx, b=outOfny, out=outOfAdd);

   // 4. use the And16 chip to produce a bitwise and of x and y and then use a Mux16 chip to connect either the Add16 or And16 to out

   And16(a=outOfnx, b=outOfny, out=outOfAnd);

   //  If f is a 1 the result of the Add16 should connected to out
   //  otherwise the result of the And16 should be connected to out.

   Mux16(a=outOfAnd, b=outOfAdd, sel=f, out=outOfMuxFirst);

   // 5. In this step we want to implement a choice between the output of the previous step or the bitwise not of the previous step. 

    // The other input is produced by connecting the output of the previous step to a Not16 chip which flips all the bits.

    Not16(in=outOfMuxFirst, out=outOfMuxFirstNot);

   // add a new Mux16 which has its output connected to out. One of its inputs should be the output from the previous step.

    // If no is 1 the new Mux16 chooses the output from the Not16 gate.

    Mux16(a=outOfMuxFirst, b=outOfMuxFirstNot, sel=no, out=out, out[15] = ng, out[0..7]=or8a ,out[8..15]=or8b);

    // for zr
    Or8Way(in=or8a, out=outOfFrontOut);
    Or8Way(in=or8b, out=outOfRearOut);
    Or(a=outOfFrontOut, b=outOfFrontOut, out=outOfZrPrev);
    Not(in=outOfZrPrev, out=zr);

    






}